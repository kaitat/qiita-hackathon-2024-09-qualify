// Code generated by sqlc-gen-ts-d1. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
//   sqlc-gen-ts-d1 v0.0.0-a@dfd4bfef4736967ca17cc23d18de20920fbd196998fe7aa191a205439d63fb58

import { D1Database, D1PreparedStatement, D1Result } from "@cloudflare/workers-types/experimental"

type Query<T> = {
  then(onFulfilled?: (value: T) => void, onRejected?: (reason?: any) => void): void;
  batch(): D1PreparedStatement;
}
const createConversationQuery = `-- name: createConversation :exec
INSERT INTO Conversations (code) VALUES (?1)`;

export type createConversationParams = {
  code: string;
};

export function createConversation(
  d1: D1Database,
  args: createConversationParams
): Query<D1Result> {
  const ps = d1
    .prepare(createConversationQuery)
    .bind(args.code);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getConversationByCodeQuery = `-- name: getConversationByCode :one
SELECT
    id, code, created_at, updated_at
FROM
    Conversations
WHERE
    code = ?1`;

export type getConversationByCodeParams = {
  code: string;
};

export type getConversationByCodeRow = {
  id: number;
  code: string;
  createdAt: string;
  updatedAt: string;
};

type RawgetConversationByCodeRow = {
  id: number;
  code: string;
  created_at: string;
  updated_at: string;
};

export function getConversationByCode(
  d1: D1Database,
  args: getConversationByCodeParams
): Query<getConversationByCodeRow | null> {
  const ps = d1
    .prepare(getConversationByCodeQuery)
    .bind(args.code);
  return {
    then(onFulfilled?: (value: getConversationByCodeRow | null) => void, onRejected?: (reason?: any) => void) {
      ps.first<RawgetConversationByCodeRow | null>()
        .then((raw: RawgetConversationByCodeRow | null) => raw ? {
          id: raw.id,
          code: raw.code,
          createdAt: raw.created_at,
          updatedAt: raw.updated_at,
        } : null)
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getConversationByIdQuery = `-- name: getConversationById :one
SELECT
    id, code, created_at, updated_at
FROM
    Conversations
WHERE
    id = ?1`;

export type getConversationByIdParams = {
  id: number;
};

export type getConversationByIdRow = {
  id: number;
  code: string;
  createdAt: string;
  updatedAt: string;
};

type RawgetConversationByIdRow = {
  id: number;
  code: string;
  created_at: string;
  updated_at: string;
};

export function getConversationById(
  d1: D1Database,
  args: getConversationByIdParams
): Query<getConversationByIdRow | null> {
  const ps = d1
    .prepare(getConversationByIdQuery)
    .bind(args.id);
  return {
    then(onFulfilled?: (value: getConversationByIdRow | null) => void, onRejected?: (reason?: any) => void) {
      ps.first<RawgetConversationByIdRow | null>()
        .then((raw: RawgetConversationByIdRow | null) => raw ? {
          id: raw.id,
          code: raw.code,
          createdAt: raw.created_at,
          updatedAt: raw.updated_at,
        } : null)
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const createMessageQuery = `-- name: createMessage :exec
INSERT INTO Messages (conversation_id, sender, message) VALUES (?1, ?2, ?3)`;

export type createMessageParams = {
  conversationId: number;
  sender: string;
  message: string;
};

export function createMessage(
  d1: D1Database,
  args: createMessageParams
): Query<D1Result> {
  const ps = d1
    .prepare(createMessageQuery)
    .bind(args.conversationId, args.sender, args.message);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getMessagesByConversationIdQuery = `-- name: getMessagesByConversationId :many
SELECT
    id, conversation_id, sender, message, created_at, updated_at
FROM
    Messages
WHERE
    conversation_id = ?1
ORDER BY
    created_at DESC`;

export type getMessagesByConversationIdParams = {
  conversationId: number;
};

export type getMessagesByConversationIdRow = {
  id: number;
  conversationId: number;
  sender: string;
  message: string;
  createdAt: string;
  updatedAt: string;
};

type RawgetMessagesByConversationIdRow = {
  id: number;
  conversation_id: number;
  sender: string;
  message: string;
  created_at: string;
  updated_at: string;
};

export function getMessagesByConversationId(
  d1: D1Database,
  args: getMessagesByConversationIdParams
): Query<D1Result<getMessagesByConversationIdRow>> {
  const ps = d1
    .prepare(getMessagesByConversationIdQuery)
    .bind(args.conversationId);
  return {
    then(onFulfilled?: (value: D1Result<getMessagesByConversationIdRow>) => void, onRejected?: (reason?: any) => void) {
      ps.all<RawgetMessagesByConversationIdRow>()
        .then((r: D1Result<RawgetMessagesByConversationIdRow>) => { return {
          ...r,
          results: r.results.map((raw: RawgetMessagesByConversationIdRow) => { return {
            id: raw.id,
            conversationId: raw.conversation_id,
            sender: raw.sender,
            message: raw.message,
            createdAt: raw.created_at,
            updatedAt: raw.updated_at,
          }}),
        }})
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getConversationMessagesQuery = `-- name: getConversationMessages :many
SELECT
    id, conversation_id, sender, message, created_at, updated_at
FROM
    Messages
WHERE
    conversation_id = ?1
ORDER BY
    created_at DESC`;

export type getConversationMessagesParams = {
  conversationId: number;
};

export type getConversationMessagesRow = {
  id: number;
  conversationId: number;
  sender: string;
  message: string;
  createdAt: string;
  updatedAt: string;
};

type RawgetConversationMessagesRow = {
  id: number;
  conversation_id: number;
  sender: string;
  message: string;
  created_at: string;
  updated_at: string;
};

export function getConversationMessages(
  d1: D1Database,
  args: getConversationMessagesParams
): Query<D1Result<getConversationMessagesRow>> {
  const ps = d1
    .prepare(getConversationMessagesQuery)
    .bind(args.conversationId);
  return {
    then(onFulfilled?: (value: D1Result<getConversationMessagesRow>) => void, onRejected?: (reason?: any) => void) {
      ps.all<RawgetConversationMessagesRow>()
        .then((r: D1Result<RawgetConversationMessagesRow>) => { return {
          ...r,
          results: r.results.map((raw: RawgetConversationMessagesRow) => { return {
            id: raw.id,
            conversationId: raw.conversation_id,
            sender: raw.sender,
            message: raw.message,
            createdAt: raw.created_at,
            updatedAt: raw.updated_at,
          }}),
        }})
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getDocumentsQuery = `-- name: getDocuments :many
SELECT
    id, conversation_id, content, created_at, updated_at
FROM
    Documents
ORDER BY
    created_at DESC`;

export type getDocumentsRow = {
  id: number;
  conversationId: number;
  content: string;
  createdAt: string;
  updatedAt: string;
};

type RawgetDocumentsRow = {
  id: number;
  conversation_id: number;
  content: string;
  created_at: string;
  updated_at: string;
};

export function getDocuments(
  d1: D1Database
): Query<D1Result<getDocumentsRow>> {
  const ps = d1
    .prepare(getDocumentsQuery);
  return {
    then(onFulfilled?: (value: D1Result<getDocumentsRow>) => void, onRejected?: (reason?: any) => void) {
      ps.all<RawgetDocumentsRow>()
        .then((r: D1Result<RawgetDocumentsRow>) => { return {
          ...r,
          results: r.results.map((raw: RawgetDocumentsRow) => { return {
            id: raw.id,
            conversationId: raw.conversation_id,
            content: raw.content,
            createdAt: raw.created_at,
            updatedAt: raw.updated_at,
          }}),
        }})
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const createDocumentQuery = `-- name: createDocument :exec
INSERT INTO Documents (conversation_id, content) VALUES (?1, ?2)`;

export type createDocumentParams = {
  conversationId: number;
  content: string;
};

export function createDocument(
  d1: D1Database,
  args: createDocumentParams
): Query<D1Result> {
  const ps = d1
    .prepare(createDocumentQuery)
    .bind(args.conversationId, args.content);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getDocumentByIdQuery = `-- name: getDocumentById :one
SELECT
    id, conversation_id, content, created_at, updated_at
FROM
    Documents
WHERE
    id = ?1`;

export type getDocumentByIdParams = {
  id: number;
};

export type getDocumentByIdRow = {
  id: number;
  conversationId: number;
  content: string;
  createdAt: string;
  updatedAt: string;
};

type RawgetDocumentByIdRow = {
  id: number;
  conversation_id: number;
  content: string;
  created_at: string;
  updated_at: string;
};

export function getDocumentById(
  d1: D1Database,
  args: getDocumentByIdParams
): Query<getDocumentByIdRow | null> {
  const ps = d1
    .prepare(getDocumentByIdQuery)
    .bind(args.id);
  return {
    then(onFulfilled?: (value: getDocumentByIdRow | null) => void, onRejected?: (reason?: any) => void) {
      ps.first<RawgetDocumentByIdRow | null>()
        .then((raw: RawgetDocumentByIdRow | null) => raw ? {
          id: raw.id,
          conversationId: raw.conversation_id,
          content: raw.content,
          createdAt: raw.created_at,
          updatedAt: raw.updated_at,
        } : null)
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

